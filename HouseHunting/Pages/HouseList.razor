@page "/houselist"
@using  Microsoft.Extensions.Configuration
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Microsoft.Extensions.Logging
@inject ILogger<HouseList> _logger

@inject INewHouseDAO _idao
@inject IConfiguration _iconfig
@inject IBL _ibl

<h3>House List</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@houseObjectList"
                    TValue="HouseObject"
                    Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })"
                    @ref="Grid"
                    AllowPaging="true"
                    AllowSorting="true">
                <GridPageSettings PageSize="30"></GridPageSettings>
                <GridEvents OnActionBegin="ActionBeginAsync" TValue="HouseObject">   </GridEvents>
                <GridEditSettings AllowAdding="true"
                                  AllowDeleting="true"
                                  AllowEditing="true"
                                  Mode="EditMode.Normal">
                </GridEditSettings>
             


                <GridTemplates>
                    <DetailTemplate >

                        @{
                            HouseObject house = (context as HouseObject);
                            var features = house.Features;
                            currentHouse = house;
                            

                            <SfGrid DataSource="@features"
                                    @ref ="DetailsGrid"
                                    TValue="FeatureObject"
                                    Toolbar="@(new List<string>() { "Edit", "Update", "Cancel" })">
                                <GridEvents OnActionBegin="ActionDetailBeginAsync" 
                                            OnBeginEdit="OnDetailBeginEdit"
                                            OnActionFailure="OnDetailActionFailure"
                                            TValue="FeatureObject">   </GridEvents>
                                <GridEditSettings AllowAdding="false"
                                                  AllowDeleting="false"
                                                  AllowEditing="true"
                                                  Mode="EditMode.Normal">

                                </GridEditSettings>
                                @*<GridColumns>

                                    <GridColumn Field=@nameof(FeatureObject.Description)
                                                AllowEditing="false"
                                                HeaderText="Feature"
                                                Width="110">
                                                
                                                EditType="EditType.DropDownEdit">
                                        <EditTemplate Context="editFeature">
                                            <SfDropDownList ID="Description" TValue="string" DataSource="FeaturesAll" TItem="FeatureObject"
                                                            @bind-Value="((editFeature as FeatureObject).Description)">
                                                            
                                                <DropDownListFieldSettings Text="Description" Value="FeatureID"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </EditTemplate>

                                    </GridColumn>
                                    <GridColumn Field=@nameof(FeatureObject.Weight)
                                                HeaderText="Weight"
                                                Width="110">
                                        <EditTemplate Context="editWeight">
                                           
                                            <SfDropDownList ID="Weight" TValue="int" DataSource="Weights" TItem="int"
                                                            @bind-Value="((editWeight as FeatureObject).Weight)">
                                                <DropDownListFieldSettings Text="Weight" Value="Weight"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </EditTemplate>

                                    </GridColumn>

                                </GridColumns>*@
                            </SfGrid>

                        }
                    </DetailTemplate>
                </GridTemplates>

                <GridColumns>
                    <GridColumn Field=@nameof(HouseObject.HouseID)
                                HeaderText="House ID"
                                IsPrimaryKey="true"
                                IsIdentity="true"
                                ValidationRules="@(new ValidationRules { Required = true, Number = true })"
                                TextAlign="TextAlign.Right"
                                Width="140">

                    </GridColumn>
                    <GridColumn Field=@nameof(HouseObject.Address)
                                HeaderText="Address"
                                ValidationRules="@(new ValidationRules { Required = true })"
                                Width="150">
                        @*<EditTemplate>
                    <SfAutoComplete TItem="OrdersDetails" TValue="string" ID="CustomerID" @bind-Value="@((context as OrdersDetails).CustomerID)" DataSource="@GridData">
                        <AutoCompleteFieldSettings Value="CustomerID"></AutoCompleteFieldSettings>
                    </SfAutoComplete>
                </EditTemplate>*@
                    </GridColumn>
                    <GridColumn Field=@nameof(HouseObject.Price)
                                HeaderText="Price"
                                ValidationRules="@(new ValidationRules { Required = true })"
                                EditType="EditType.NumericEdit"
                                Format="C2"
                                TextAlign="TextAlign.Right"
                                Width="140">

                    </GridColumn>
                    @*<GridColumn Field=@nameof(HouseObject.Features)
            HeaderText="Zillow"
            Width="160"
            Visible="false"
            EditType="EditType.DropDownEdit">*@

                    @*</GridColumn>*@
                    <GridColumn Field=@nameof(HouseObject.ZillowUrl)
                                HeaderText="Zillow"
                                Width="160">

                    </GridColumn>
                    <GridColumn Field=@nameof(HouseObject.ImageUrl)
                                HeaderText="Image Url"
                                Width="150">

                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    List<HouseObject> houseObjectList;
    List<FeatureObject> Features;
    List<FeatureObject> FeaturesAll;
    List<int> Weights = new List<int>();
    string selectedFeature;
    HouseObject currentHouse;
    FeatureObject currentFeature;
    SfGrid<HouseObject> Grid;
    SfGrid<FeatureObject> DetailsGrid;
    string sql = string.Empty;
    string connString;


    protected override async Task OnInitializedAsync()
    {
        for(int i = 1; i<11; i++)
        {
            Weights.Add(i);
        }

        try
        {
            connString = _iconfig.GetConnectionString("defaultWork");
            sql = "spGetAllFeatures";
            FeaturesAll = await _idao.Load<FeatureObject, dynamic>(new { }, connString, sql);

            sql = "spGetAllHouseDetails";
            houseObjectList = await _idao.Load<HouseObject, dynamic>(new { }, connString, sql);

            foreach (HouseObject house in houseObjectList)
            {
                sql = "spGetFeaturesByHouseID";
                Features = await _idao.Load<FeatureObject, dynamic>(new { HouseID = house.HouseID }, connString, sql);

                house.Features.AddRange(Features);
                house.Score = house.GetScore();

            }

        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in initialize house list page {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }





    }
    public async Task ActionBeginAsync(ActionEventArgs<HouseObject> args)
    {
        HouseObject house = args.Data;
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == "Edit")
                {
                    sql = "spUpdateHouseDetails";
                    bool isEdit = await _idao.EditAsync<dynamic>(new { Address = house.Address, Price = house.Price, ZillowUrl = house.ZillowUrl, ImageUrl = house.ImageUrl, HouseID = house.HouseID }, connString, sql);

                }
                else if (args.Action == "Add")
                {
                    int newId = await _idao.AddHouseAsync<HouseObject>(house.Address, house.Price, house.ZillowUrl, house.ImageUrl, connString);
                }
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                //TODO make this SP
                bool isDeleted = await _idao.DeleteHouseAsync<dynamic>(new { HouseID = house.HouseID }, connString);
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {

            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in ActionBeginAsync {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }

    }
    public async Task ActionDetailBeginAsync(ActionEventArgs<FeatureObject> args)
    {
        FeatureObject features = args.Data;
        string sf = selectedFeature;
        bool result;
        int id;
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == "Edit")
                {

                    sql = "spEditFeatureWeight";
                    result = await _idao.EditAsync<dynamic>(new { Weight = args.Data.Weight, FeatureID = args.Data.FeatureID, HouseID = currentHouse.HouseID}, connString, sql);
                }
                else if (args.Action == "Add")
                {
                    sql = "spInsertNewHouse";
                    result = await _idao.AddAsync<dynamic>(new { HouseID = currentHouse.HouseID, FeatureID = features.FeatureID, }, connString, sql);
                }
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                sql = "spDeleteFeatureByHouseID";
                bool isDeleted = await _idao.DeleteAsync<dynamic>(new { HouseID = currentHouse.HouseID, FeatureID = args.Data.FeatureID }, connString, sql);
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in ActionDetailBeginAsync {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }

    }
    public async Task OnDetailBeginEdit(BeginEditArgs<FeatureObject> args)
    {
        if(!args.RowData.IsEditable)
        {
            args.Cancel = true;

            return;
        }


    }
    public void OnDetailActionFailure(FailureEventArgs args)
    {
        _logger.LogWarning("Warning in OnDetailActionFailure {Time}", DateTime.UtcNow);
        // Here you can get the error details in the args
    }

}
