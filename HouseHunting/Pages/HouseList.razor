@page "/houselist"
@using  Microsoft.Extensions.Configuration
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Microsoft.Extensions.Logging
@using HouseHunting.Data
@inject ILogger<HouseList> _logger

@inject INewHouseDAO _idao
@inject IConfiguration _iconfig
@inject IBL _ibl

<h3>House List</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            @if (houseObjectList == null)
            {
                <p><em>Loading Houses...</em></p>
            }
            else
            {
                <SfGrid DataSource="@houseObjectList"
                        TValue="HouseObject"
                        SelectedRowIndex="0"
                        Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })"
                        @ref="Grid"
                        AllowPaging="true"
                        AllowSorting="true">
                    <GridPageSettings PageSize="6"></GridPageSettings>
                    <GridEvents OnActionBegin="ActionBeginAsync" TValue="HouseObject"
                                RowSelected="OnRowSelected"
                                OnActionFailure="OnActionFailure"
                                OnActionComplete="OnActionCompleteAsync">
                                
                    </GridEvents>
                    <GridEditSettings AllowAdding="true"
                                      AllowDeleting="true"
                                      AllowEditing="true"
                                      Mode="EditMode.Normal">
                    </GridEditSettings>

                    <GridColumns>
                        @*//grid won't update with this column :(*@
                        @*<GridColumn HeaderText="Image" Width="40">
                            <Template>
                                @{
                                    var house = (context as HouseObject);
                                    <div class="image">
                                        <img src="@house.ImageUrl" />
                                    </div>

                                }
                            </Template>
                        </GridColumn>*@
                        <GridColumn Field=@nameof(HouseObject.HouseID)
                                    HeaderText="House ID"
                                    IsPrimaryKey="true"
                                    IsIdentity="true"
                                    ValidationRules="@(new ValidationRules { Required = true, Number = true })"
                                    TextAlign="TextAlign.Center"
                                    Width="40">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.Address)
                                    HeaderText="Address"
                                    ValidationRules="@(new ValidationRules { Required = true })"
                                    Width="150">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.Price)
                                    HeaderText="Price"
                                    ValidationRules="@(new ValidationRules { Required = true })"
                                    EditType="EditType.NumericEdit"
                                    Format="C2"
                                    TextAlign="TextAlign.Center"
                                    Width="80">

                        </GridColumn>

                        <GridColumn Field=@nameof(HouseObject.ZillowUrl)
                                    HeaderText="Zillow"
                                    Width="160">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.ImageUrl)
                                    HeaderText="Image Url"
                                    Width="75"
                                    Visible="true">
                            
                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.IsActive)
                                    HeaderText="Is Active"
                                    DisplayAsCheckBox="true"
                                    Width="50">

                        </GridColumn>
                    </GridColumns>
                </SfGrid>
                @if (SelectedHouse == null)
                {
                    <p><em>Loading Features...</em></p>
                }
                else
                {

                    <SfGrid DataSource="@SelectedHouse.Features"
                            @ref="DetailsGrid"
                            Toolbar="@(new List<string>() {"Add","Edit","Delete","Update", "Cancel" })">
                        <GridEvents OnActionBegin="OnActionDetailBeginAsync"
                                    OnBeginEdit="OnDetailBeginEditAsync"
                                    OnActionFailure="OnDetailActionFailure"
                                    TValue="FeatureObject">   </GridEvents>
                        <GridEditSettings AllowAdding="true"
                                          AllowDeleting="true"
                                          AllowEditing="true"
                                          Mode="EditMode.Normal">
                        </GridEditSettings>

                        <GridColumns>
                            <GridColumn Field=@nameof(FeatureObject.Description) HeaderText="Feature" Width="110"
                                        AllowEditing="false" EditType="EditType.DropDownEdit"
                                        IsPrimaryKey="true">
                                <EditTemplate Context="editFeature">
                                    @{ 
                                        var feature = (editFeature as FeatureObject);
                                        int index = SelectedHouse.Features.IndexOf(feature);
                                    }
                                    <SfDropDownList ID="FeatureID" TValue="int" DataSource="FeaturesAll" TItem="FeatureObject"
                                                    @bind-Value="@((editFeature as FeatureObject).FeatureID)">
                                        <DropDownListFieldSettings Text="Description" Value="FeatureID"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(FeatureObject.Weight) HeaderText="Weight" Width="110"
                                        EditType="EditType.NumericEdit"></GridColumn>

                        </GridColumns>
                    </SfGrid>
                }
            }


        </div>
    </div>
</div>
<style>
    .image img {
        height: 55px;
        width: 55px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0,0,0,0.2);
    }
</style>

@code {
    List<HouseObject> houseObjectList;
    List<FeatureObject> Features;
    List<FeatureObject> FeaturesAll;
    List<int> Weights = new List<int>();

    HouseObject currentHouse;
    FeatureObject currentFeature;
    SfGrid<HouseObject> Grid;
    SfGrid<FeatureObject> DetailsGrid;
    string sql = string.Empty;
    string connString;
    HouseObject SelectedHouse;
    int RowIndex;

    List<HouseFeaturesGrid> houseFeatures;


    protected override async Task OnInitializedAsync()
    {
        for (int i = 1; i < 11; i++)
        {
            Weights.Add(i);
        }

        try
        {
            connString = _iconfig.GetConnectionString("defaultWork");
            sql = "spGetAllFeatures";
            FeaturesAll = await _idao.Load<FeatureObject, dynamic>(new { }, connString, sql);
            sql = "spGetAllHouseFeatures";
            houseFeatures = await _idao.Load<HouseFeaturesGrid, dynamic>(new { }, connString, sql);
            sql = "spGetAllHouseDetails";
            houseObjectList = await _idao.Load<HouseObject, dynamic>(new { }, connString, sql);

            foreach (HouseObject house in houseObjectList)
            {
                sql = "spGetFeaturesByHouseID";
                Features = await _idao.Load<FeatureObject, dynamic>(new { HouseID = house.HouseID }, connString, sql);

                house.Features.AddRange(Features);
                house.Score = house.GetScore();

            }

        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in initialize house list page {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }





    }
    public async Task ActionBeginAsync(ActionEventArgs<HouseObject> args)
    {
        HouseObject house = args.Data;
        try
        {
            //if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            //{
            //    await Grid.ShowColumns("Image Url");
            //}
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == "Edit")
                {

                    sql = "spUpdateHouseDetails";
                    bool isEdit = await _idao.EditAsync<dynamic>(new { Address = house.Address, Price = house.Price, ZillowUrl = house.ZillowUrl, ImageUrl = house.ImageUrl, HouseID = house.HouseID, IsActive = house.IsActive }, connString, sql);

                }
                else if (args.Action == "Add")
                {
                    int newId = await _idao.AddHouseAsync<HouseObject>(house.Address, house.Price, house.ZillowUrl, house.ImageUrl, connString, house.IsActive);
                }
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                //TODO make this SP
                bool isDeleted = await _idao.DeleteHouseAsync<dynamic>(new { HouseID = house.HouseID }, connString);
            }

        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in ActionBeginAsync {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }


    }
    public async Task OnActionDetailBeginAsync(ActionEventArgs<FeatureObject> args)
    {
        FeatureObject features = args.Data;
        bool result;
        int id;
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == "Edit")
                {

                    sql = "spEditFeatureWeight";
                    result = await _idao.EditAsync<dynamic>(new { Weight = args.Data.Weight, FeatureID = args.Data.FeatureID, HouseID = SelectedHouse.HouseID }, connString, sql);
                }
                else if (args.Action == "Add")
                {
                    sql = "spInsertNewHouseFeature";
                    result = await _idao.AddAsync<dynamic>(new { HouseID = SelectedHouse.HouseID, FeatureID = args.Data.FeatureID, Weight = args.Data.Weight }, connString, sql);
                }
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                sql = "spDeleteFeatureByHouseID";
                bool isDeleted = await _idao.DeleteAsync<dynamic>(new { HouseID = SelectedHouse.HouseID, FeatureID = args.Data.FeatureID }, connString, sql);
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in ActionDetailBeginAsync {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }

    }
    public async Task OnDetailBeginEditAsync(BeginEditArgs<FeatureObject> args)
    {
        if (!args.RowData.IsEditable)
        {
            args.Cancel = true;

            return;
        }


    }
    public void OnRowSelected(RowSelectEventArgs<HouseObject> Args)
    {
        SelectedHouse = Args.Data;
        RowIndex = Args.Data.HouseID;
    }
    public void OnDetailActionFailure(FailureEventArgs args)
    {
        _logger.LogWarning("Warning in OnDetailActionFailure {Time}", DateTime.UtcNow);
        // Here you can get the error details in the args
    }
    public void OnActionFailure(FailureEventArgs args)
    {
        _logger.LogWarning("Warning in OnDetailActionFailure {Time}", DateTime.UtcNow);
        // Here you can get the error details in the args
    }
    public async void OnActionCompleteAsync(ActionEventArgs<HouseObject> Args)
    {
        //if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        //{
        //    await Grid.HideColumns("Image Url");
        //}
    }

}
