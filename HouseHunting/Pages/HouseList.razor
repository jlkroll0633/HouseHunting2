@page "/houselist"
@page "/houselist/{id:int}"


@using  Microsoft.Extensions.Configuration
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Microsoft.Extensions.Logging
@using HouseHunting.Data

@inject ILogger<HouseList> _logger
@inject INewHouseDAO _idao
@inject IConfiguration _iconfig
@inject IBL _ibl
@inject IJSRuntime _jsRuntime

<h3>House List</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            @if (houseObjectList == null)
            {
                <p><em>Loading Houses...</em></p>
            }
            else
            {
                <SfGrid DataSource="@houseObjectList"
                        TValue="HouseObject"
                        SelectedRowIndex="@selectedRow"
                        Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })"
                        @ref="Grid"
                        AllowPaging="false"
                        AllowSorting="true"
                        AllowSelection="true">

                    @*<GridPageSettings PageSize="6"></GridPageSettings>*@
                    <GridEvents OnActionBegin="ActionBeginAsync" TValue="HouseObject"
                                RowSelected="OnRowSelected"
                                OnActionFailure="OnActionFailure"
                                OnActionComplete="OnActionCompleteAsync"
                                OnDataBound="DataHandlerAsync"
                                OnLoad="OnGridLoadAsync">


                    </GridEvents>
                    <GridEditSettings AllowAdding="true"
                                      AllowDeleting="true"
                                      AllowEditing="true"
                                      Mode="EditMode.Normal">
                    </GridEditSettings>

                    <GridColumns>
                        @*//grid won't update with this column :(*@
                        @*<GridColumn HeaderText="Image" Width="40">
                        <Template>
                            @{
                                var house = (context as HouseObject);
                                <div class="image">
                                    <img src="@house.ImageUrl" />
                                </div>

                            }
                        </Template>
                    </GridColumn>*@
                        <GridColumn Field=@nameof(HouseObject.HouseID)
                                    HeaderText="House ID"
                                    IsPrimaryKey="true"
                                    IsIdentity="true"
                                    ValidationRules="@(new ValidationRules { Required = true, Number = true })"
                                    TextAlign="TextAlign.Center"
                                    Width="40">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.Address)
                                    HeaderText="Address"
                                    ValidationRules="@(new ValidationRules { Required = true })"
                                    Width="110">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.Price)
                                    HeaderText="Price"
                                    ValidationRules="@(new ValidationRules { Required = true })"
                                    EditType="EditType.NumericEdit"
                                    Format="C2"
                                    TextAlign="TextAlign.Center"
                                    Width="80">

                        </GridColumn>

                        <GridColumn Field=@nameof(HouseObject.ZillowUrl)
                                    HeaderText="Zillow"
                                    Width="100">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.ImageUrl)
                                    HeaderText="Image Url"
                                    Width="50"
                                    Visible="true">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.IsActive)
                                    HeaderText="Is Active"
                                    DisplayAsCheckBox="true"
                                    Width="30">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.Notes)
                                    HeaderText="Notes"
                                    Width="100">

                        </GridColumn>
                    </GridColumns>
                </SfGrid>
                @if (SelectedHouse == null)
                {
                    <p><em>Loading Features...</em></p>
                }
                else
                {
                    <div class="image">
                        <img src="@SelectedHouse.ImageUrl" />
                        <b class="imageText">@SelectedHouse.Score.ToString()</b>

                    </div>
                    <div >
                        <SfButton CssClass="btn" @onclick="@(e =>NavigateToUrlAsync(SelectedHouse.ZillowUrl))">Zillow</SfButton>
                    </div>

                    <SfGrid DataSource="@SelectedHouse.Features"
                            @ref="DetailsGrid"
                            Toolbar="@(new List<string>() {"Add","Edit","Delete","Update", "Cancel" })">
                        <GridEvents OnActionBegin="OnActionDetailBeginAsync"
                                    OnBeginEdit="OnDetailBeginEditAsync"
                                    OnActionFailure="OnDetailActionFailure"
                                    TValue="FeatureObject">   </GridEvents>
                        <GridEditSettings AllowAdding="true"
                                          AllowDeleting="true"
                                          AllowEditing="true"
                                          Mode="EditMode.Normal">
                        </GridEditSettings>



                        <GridColumns>

                            <GridColumn Field=@nameof(FeatureObject.Description) HeaderText="Feature" Width="110"
                                        AllowEditing="false" EditType="EditType.DropDownEdit"
                                        IsPrimaryKey="true">

                                <EditTemplate Context="editFeature">
                                    @{
                                        var feature = (editFeature as FeatureObject);
                                        int index = SelectedHouse.Features.IndexOf(feature);
                                    }
                                    <SfDropDownList ID="FeatureID" TValue="int" DataSource="FeaturesAll" TItem="FeatureObject"
                                                    @bind-Value="@((editFeature as FeatureObject).FeatureID)">
                                        <DropDownListFieldSettings Text="Description" Value="FeatureID"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(FeatureObject.Weight) HeaderText="Weight" Width="110"
                                        EditType="EditType.NumericEdit"></GridColumn>

                        </GridColumns>
                    </SfGrid>
                }

            }


        </div>
    </div>
</div>
<style>
    .image img {
        height: 55px;
        width: 55px;
        border-radius: 5px 20px 5px;
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
        float: left;
    }

    .imageText {
        padding-left: 20px;
        float: right;
        font-size: x-large;
        color: maroon;
        
    }
    .btn {
        position: absolute;
        right: 0;
        background-color: white;
        color: black;
        border: 2px solid #4CAF50; /* Green */
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
    }
</style>

@code {

    [Parameter]
    public int Id { get; set; }

    int selectedRow = 0;

    List<HouseObject> houseObjectList;
    List<FeatureObject> Features;
    List<FeatureObject> FeaturesAll;
    List<int> Weights = new List<int>();

    HouseObject currentHouse;
    FeatureObject currentFeature;
    SfGrid<HouseObject> Grid;

    SfGrid<FeatureObject> DetailsGrid;
    string sql = string.Empty;
    string connString;
    HouseObject SelectedHouse;
    int RowIndex;

    List<HouseFeaturesGrid> houseFeatures;

    public async Task OnGridLoadAsync()
    {
        if (SelectedHouse == null) selectedRow = 0;
        else selectedRow = houseObjectList.IndexOf(SelectedHouse);

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            houseObjectList = await _ibl.GetAllHouseList();
            SelectedHouse = houseObjectList.Find(h => h.HouseID == Id);
            FeaturesAll = await _ibl.GetAllUniqueFeatures();
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in initialize house list page {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }

    }
    public async Task ActionBeginAsync(ActionEventArgs<HouseObject> args)
    {
        HouseObject house = args.Data;
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                //await Grid.ShowColumns("Image Url");
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == "Edit")
                {
                    bool isEdit = await _ibl.EditHouseDetails(house);

                }
                else if (args.Action == "Add")
                {

                    int newId = await _ibl.AddNewHouse(house);
                }
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                //TODO make this SP

                bool isDeleted = await _ibl.DeleteHouse(house.HouseID);
            }

        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in ActionBeginAsync {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }


    }
    public async Task OnActionDetailBeginAsync(ActionEventArgs<FeatureObject> args)
    {
        FeatureObject features = args.Data;
        bool result;
        int id;
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                //sql = "spGetFeatureByFeatureID";
                List<FeatureObject> sqlFeatures = await _ibl.GetFeatureByFeatureID(features);
                FeatureObject sqlFeature = sqlFeatures[0];

                if (args.Action == "Edit")
                {
                    result = await _ibl.EditHouseFeatures(features, sqlFeature, SelectedHouse);

                }
                else if (args.Action == "Add")
                {

                    result = await _ibl.AddFeatureToHouse(features, sqlFeature, SelectedHouse);
                }
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                bool isDeleted = await _ibl.DeleteFeatureFromHouse(SelectedHouse, features);
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in ActionDetailBeginAsync {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }

    }
    public async Task OnDetailBeginEditAsync(BeginEditArgs<FeatureObject> args)
    {

        if (!args.RowData.IsEditable)
        {
            args.Cancel = true;

            return;
        }


    }
    public void OnRowSelected(RowSelectEventArgs<HouseObject> Args)
    {
        SelectedHouse = Args.Data;
        RowIndex = Args.Data.HouseID;

    }
    public void OnDetailActionFailure(FailureEventArgs args)
    {
        _logger.LogWarning("Warning in OnDetailActionFailure {Time}", DateTime.UtcNow);
        // Here you can get the error details in the args
    }
    public void OnActionFailure(FailureEventArgs args)
    {
        _logger.LogWarning("Warning in OnDetailActionFailure {Time}", DateTime.UtcNow);
        // Here you can get the error details in the args
    }
    public async void OnActionCompleteAsync(ActionEventArgs<HouseObject> Args)
    {
        //if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        //{
        //    await Grid.HideColumns("Image Url");
        //}
    }
    public bool ContinuePaging = true;
    public bool InitialRender { get; set; }
    //public int Value = 1015; // consider that value your querystring contains
    public List<HouseObject> houseObj { get; set; }


    public async Task DataHandlerAsync()
    {
        try
        {
            await this.Grid.SelectRow(selectedRow);
            //if (InitialRender) // to handled during the initial rendering of Grid
            //{
            //    InitialRender = false;

            //    //int pgCt = Grid.PageSettings.PageCount;
            //    //int pgSz = Grid.PageSettings.PageSize;
            //    //int housePosition = houseObjectList.IndexOf(SelectedHouse) + 1;
            //    //int cnt = 1;
            //    //decimal dec = housePosition / pgSz;
            //    //decimal page = Math.Ceiling(dec);
            //    //int remainder;
            //    //Math.DivRem(housePosition,pgSz, out remainder);

            //    //await Grid.GoToPage(3);
            //    await Grid.SelectRow(selectedRow);


            //}
        }
        catch (Exception ex)
        {
            _logger.LogWarning("Warning in DataHandler {Time}. {stackTrace}. {ex.message}", DateTime.UtcNow, ex.StackTrace, ex.Message);
        }


    }
    public async Task NavigateToUrlAsync(string url)
    {
        try
        {
            await _jsRuntime.InvokeAsync<object>("open", url, "_blank");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning navigating to url {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }

    }



}
