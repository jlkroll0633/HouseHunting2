@page "/counter"

@using  Microsoft.Extensions.Configuration
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Microsoft.Extensions.Logging
@using HouseHunting.Data
    @inject ILogger<MarkerModel> _logger

    @inject INewHouseDAO _idao
@inject IConfiguration _iconfig
@inject IBL _ibl

<h3>House List</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            @if (mapMarkersData == null)
            {
                <p><em>Loading Locations...</em></p>
            }
            else
            {
                <SfGrid DataSource="@mapMarkersData" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
                    <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                    <GridEvents OnActionBegin="OnActionBeginAsync" TValue="HouseHunting.Data.MarkerModel"
                                OnActionFailure="OnActionFailureAsync"
                                OnBeginEdit="OnBeginEditAsync"
                                OnCellSave="OnCellSaveAsync"
                                OnActionComplete="OnActionCompleteAsync">

                    </GridEvents>
                    <GridColumns>
                        <GridColumn Field=@nameof(HouseHunting.Data.MarkerModel.HouseID)
                                    IsPrimaryKey="true"
                                    Width="50">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseHunting.Data.MarkerModel.Latitude)
                                    Width="70">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseHunting.Data.MarkerModel.Longitude)
                                    Width="70">

                        </GridColumn>
                    </GridColumns>

                </SfGrid>
            }



        </div>
    </div>
</div>

@code {
    string sql = string.Empty;
    string connString = string.Empty;

    List<Pages.Counter.MarkerModel> mapMarkers;
    List<HouseHunting.Data.MarkerModel> mapMarkersData;

    public class MarkerModel : HouseObject
    {

        public string Name { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }

    }
    public class HouseObject
    {
        public int HouseID { get; set; }
        public string Address { get; set; }
        public decimal Price { get; set; }
        public List<FeatureObject> Features { get; set; } = new List<FeatureObject>();
        public double Score { get; set; }
        public string ZillowUrl { get; set; }
        public bool IsActive { get; set; }
        public string ImageUrl { get; set; }
        public string Notes { get; set; }

        public double GetScore()
        {
            if (Features.Count == 0)
            {
                return 0;
            }
            else
            {
                int score = 0;
                foreach (FeatureObject feat in Features)
                {
                    score += feat.Weight;
                }
                return score;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //throw new Exception("Jen's exception");
        try
        {
            mapMarkers = new List<MarkerModel>
            {
                new MarkerModel(){HouseID = 24, Latitude =36.000990, Longitude =-92.757490, IsActive = true, Notes = "Notes" },
                new MarkerModel(){HouseID = 26, Latitude =36.817344, Longitude =-92.585746, IsActive = true, Notes = "Notes" },
                new MarkerModel(){HouseID = 21, Latitude =36.297406, Longitude =-90.970228, IsActive = true, Notes = "Notes" },
            };
            mapMarkersData = await _ibl.GetHousesWithMapMarkers();

        }
        catch (Exception ex)
        {
            //_logger.LogWarning(ex, "Warning in initialize map page {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }
    }
    public async Task OnActionBeginAsync(ActionEventArgs<HouseHunting.Data.MarkerModel> args)
    {
        HouseHunting.Data.MarkerModel marker = args.Data;
        try
        {

            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == "Edit")
                {
                    //bool isEdit = await _ibl.EditMapMarker(marker);

                }
                else if (args.Action == "Add")
                {

                    //bool isAdded = await _ibl.AddNewLocation(marker);
                }
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {

                bool isDeleted = await _ibl.DeleteLocation(marker.HouseID);
            }

        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in ActionBeginAsync {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }
    }
    public async Task OnActionFailureAsync(FailureEventArgs args)
    {
        //_logger.LogWarning("Warning in OnActionFailureAsync {Time}", DateTime.UtcNow);
    }
    public async Task OnBeginEditAsync(BeginEditArgs<HouseHunting.Data.MarkerModel> args)
    {
        //_logger.LogWarning("Warning in OnBeginEditAsync {Time}", DateTime.UtcNow);
    }
    public async Task OnCellSaveAsync(CellSaveArgs<HouseHunting.Data.MarkerModel> args)
    {
        //_logger.LogWarning("Warning in OnCellSaveAsync {Time}", DateTime.UtcNow);
    }
    public async Task OnActionCompleteAsync(ActionEventArgs<HouseHunting.Data.MarkerModel> args)
    {
        //_logger.LogWarning("Warning in OnActionCompleteAsync {Time}", DateTime.UtcNow);
    }

}