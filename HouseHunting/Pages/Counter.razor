@page "/counter"

@using  Microsoft.Extensions.Configuration
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Microsoft.Extensions.Logging
@using HouseHunting.Data
@inject ILogger<HouseList> _logger

@inject INewHouseDAO _idao
@inject IConfiguration _iconfig
@inject IBL _ibl

<h3>House List</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            @if (houseObjectList == null)
            {
                <p><em>Loading Houses...</em></p>
            }
            else
            {
                <SfGrid DataSource="@houseObjectList"
                        TValue="HouseObject"
                        SelectedRowIndex="0"
                        Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })"
                        
                        AllowPaging="true"
                        AllowSorting="true">
                    <GridPageSettings PageSize="7"></GridPageSettings>
                    <GridEvents TValue="HouseObject"
                                RowSelected="OnRowSelected"
                                OnActionFailure="OnActionFailure">   </GridEvents>
                    <GridEditSettings AllowAdding="true"
                                      AllowDeleting="true"
                                      AllowEditing="true"
                                      Mode="EditMode.Normal">
                    </GridEditSettings>

                    <GridColumns>
                        <GridColumn Field=@nameof(HouseObject.HouseID)
                                    HeaderText="House ID"
                                    IsPrimaryKey="true"
                                    IsIdentity="true"
                                    ValidationRules="@(new ValidationRules { Required = true, Number = true })"
                                    TextAlign="TextAlign.Right"
                                    Width="140">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.Address)
                                    HeaderText="Address"
                                    ValidationRules="@(new ValidationRules { Required = true })"
                                    Width="150">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.Price)
                                    HeaderText="Price"
                                    ValidationRules="@(new ValidationRules { Required = true })"
                                    EditType="EditType.NumericEdit"
                                    Format="C2"
                                    TextAlign="TextAlign.Right"
                                    Width="140">

                        </GridColumn>

                        <GridColumn Field=@nameof(HouseObject.ZillowUrl)
                                    HeaderText="Zillow"
                                    Width="160">

                        </GridColumn>
                        <GridColumn Field=@nameof(HouseObject.ImageUrl)
                                    HeaderText="Image Url"
                                    Width="150">

                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            }

            @if (SelectedHouse == null)
            {
                <p><em>Loading Features...</em></p>
            }
            else
            {
                <SfGrid DataSource="@SelectedHouse.Features"
                        Toolbar="@(new List<string>() { "Edit", "Update", "Cancel" })">
                    <GridEvents OnActionBegin="OnActionDetailBeginAsync"
                                OnBeginEdit="OnDetailBeginEditAsync"
                                OnActionFailure="OnDetailActionFailure"
                                TValue="FeatureObject">   </GridEvents>
                    <GridEditSettings AllowAdding="true"
                                      AllowDeleting="true"
                                      AllowEditing="true"
                                      Mode="EditMode.Normal">
                    </GridEditSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(FeatureObject.Description) HeaderText="Feature" Width="110"
                                    AllowEditing="false"> </GridColumn>
                        <GridColumn Field=@nameof(FeatureObject.Weight) HeaderText="Weight" Width="110"
                                    EditType="EditType.NumericEdit"></GridColumn>

                    </GridColumns>
                </SfGrid>
            }

        </div>
    </div>
</div>

@code {
    List<HouseObject> houseObjectList;
    HouseObject SelectedHouse;
    public int? RowIndex { get; set; } = 0;
    string connString;
    protected override async Task OnInitializedAsync()
    {
     

        try
        {
            houseObjectList = new List<HouseObject>
            {
                new HouseObject() {HouseID = 1, Address = "Address1", ImageUrl = "images/house1.png", ZillowUrl = "https://www.zillow.com/homes/209-Gutter-Rd,-Harriet,-AR-72639_rb/193984030_zpid/",
                Features = new List<FeatureObject>{
                    new FeatureObject() {FeatureID = 1, Description = "Desc1", Name = "Name1", IsEditable = true, Weight = 5 },
                    new FeatureObject() {FeatureID = 2, Description = "Desc2", Name = "Name2", IsEditable = true, Weight = 2 }} },


                new HouseObject() {HouseID = 2, Address = "Address2", ImageUrl = "images/house2.png", ZillowUrl = "https://www.zillow.com/homes/209-Gutter-Rd,-Harriet,-AR-72639_rb/193984030_zpid/",
                Features = new List<FeatureObject>{
                    new FeatureObject() {FeatureID = 1, Description = "Desc1", Name = "Name1", IsEditable = true, Weight = 5 },
                    new FeatureObject() {FeatureID = 2, Description = "Desc2", Name = "Name2", IsEditable = true, Weight = 2 }} }
            };
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in initialize house list page {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }





    }
    public async Task OnActionDetailBeginAsync(ActionEventArgs<FeatureObject> args)
    {
        FeatureObject features = args.Data;
        bool result;
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == "Edit")
                {

                }
                else if (args.Action == "Add")
                {

                }
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {

            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Warning in ActionDetailBeginAsync {Time}", DateTime.UtcNow);
            //string stackTrace = _ibl.GenerateStackTrace(ex);
        }

    }
    public async Task OnDetailBeginEditAsync(BeginEditArgs<FeatureObject> args)
    {
        if (!args.RowData.IsEditable)
        {
            args.Cancel = true;

            return;
        }


    }
    public void OnRowSelected(RowSelectEventArgs<HouseObject> Args)
    {
        SelectedHouse = Args.Data;
        RowIndex = Args.Data.HouseID;
    }
    public void OnDetailActionFailure(FailureEventArgs args)
    {
        _logger.LogWarning("Warning in OnDetailActionFailure {Time}", DateTime.UtcNow);
        // Here you can get the error details in the args
    }
    public void OnActionFailure(FailureEventArgs args)
    {
        _logger.LogWarning("Warning in OnDetailActionFailure {Time}", DateTime.UtcNow);
        // Here you can get the error details in the args
    }
}
